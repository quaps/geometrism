module Sound.Tidal.BS.Geometrism where

import Sound.Tidal.Context
import Sound.Tidal.Scales
import Sound.Tidal.Chords

let tetranacci = "1 5 26 10 312 130 342 20 78 1560 120 130 84 1710 312 40  4912 390 6858 1560 4446 120 12166 260 1560 420 234 1710 280 1560 61568 80 1560 24560 17784 390 1368 34290 1092 1560 240 22230 162800 120 312 60830 103822 520"

let tribonacci = "1 4 13 8 31 52 48 16 39 124 110 104 168 48 403 32 96 156 360 248 624 220 553 208 155 168 117 48 140 1612 331 64 1430 96 1488 312 469 360 2184 496 560 624 308 440 1209 2212 46 416"

-- entries in Durer's magic square
let magicSQ = "16 3 2 13 5 10 11 8 9 6 7 12 4 15 14 1"

let pisanoA = "1 3 8 6 20 24 16 12 24 60 10 24 28 48 40 24 36 24 18 60 16 30 48 24 100 84 72 48 14 120 30 48 40 36 80 24 76 18 56 60 40 48 88 30 120 48 32 24 112 300 72 84 108 72 20 48 72 42 58 120 60 30 48 96 140 120 136"

-- the Pisano periods of (1 3)-Fibonacci numbers
let pisanoB = "1 3 1 6 24 3 24 6 3 24 120 6 156 24 24 12 16 3 90 24 24 120 22 6 120 156 9 24 28 24 240 24 120 48 24 6 171 90 156 24 336 24 42 120 24 66 736 12"

-- The Pisano periods of Jacobsthal numbers (or (1 2)-Fibonacci numbers)
let pisanoC = "1 1 6 2 4 6 6 2 18 4 10 6 12 6 12 2 8 18 18 4 6 10 22 6 20 12 54 6 28 12 10 2 30 8 12 18 36 18 12 4 20 6 14 10 36 22 46 6"

-- Number of points on surface of tetrahedron: 2n^2 + 2
let tetrahedron = "1 4 10 20 34 52 74 100 130 164 202 244 290 340 394 452 514 580 650 724 802 884 970 1060 1154 1252 1354 1460 1570 1684 1802 1924 2050 2180 2314 2452 2594 2740 2890 3044 3202 3364 3530 3700 3874 4052 4234"

-- Sizes of successive clusters in f.c.c. lattice centered at a lattice point.
let latticeA = "1 13 19 43 55 79 87 135 141 177 201 225 249 321 321 369 381 429 459 531 555 603 627 675 683 767 791 887 935 959 959 1055 1061 1157 1205 1253 1289 1409 1433 1481 1505 1553 1601 1721 1745 1865 1865 1961 1985 2093 2123"

-- Decimal expansion of the area of Durer's approximation of a regular pentagon with each side of unit length.
let durerPentagon = "1 7 2 0 3 1 1 4 2 9 7 3 7 1 7 1 6 6 2 6 1 8 8 1 7 8 1 0 2 8 4 9 4 7 9 7 6 1 6 1 2 0 3 4 6 8 1 1 1 8 9 7 9 1 2 7 4 5 8 4 2 5 3 3 3 2 2 7 4 2 5 3 9 8 5 9 6 0 2 9 0 4 8 3 9 0 6 2 5 2 9 6 1 6 0 8 6 1 2 8"

-- Fibonacci thru 28k
let Fibonacci = "0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657"

let goldRect = "0 1 2 6 15 40 104 273 714 1870 4895 12816"

let SQFibonacci = "0 1 1 4 9 25 64 169 441 1156 3025 7921 20736"

-- Indices of prime Fibonacci numbers.
let primeFibonacci = "3 4 5 7 11 13 17 23 29 43 47 83 131 137 359 431 433 449 509 569 571 2971 4723 5387 9311 9677 14431"

let caesium = "3 2 6 1 2 2 5 5 7 1 7 4 9 4 0 5 5 5 6 7 9 4 1 0 1 8 4 8 3 7 6 3 3 2 8 2 0 3 0 1 7 9 6 9 9 0 1 7 7 9 2 8 1 2 1 2 3 0 5 1 0 2 4 8 1 0 0 5 8 2 8 4 3 2 0 9 0 0 1 9 4 1 7 8 0 1 6 1 1 7 7 9 3 4 3 5 7 7 4 7 0 4 1 5 7"

-- Tetrahedral (or triangular pyramidal) numbers: a(n) = C(n+23) = n*(n+1)*(n+2)/6.
let pyramid = "0 1 4 10 20 35 56 84 120 165 220 286 364 455 560 680 816 969 1140 1330 1540 1771 2024 2300 2600 2925 3276 3654 4060 4495 4960 5456 5984 6545 7140 7770 8436 9139 9880 10660 11480 12341 13244 14190 15180"

let icosahedron = "0 9 35 78 139 217 312 424 554 701 866 1048 1247 1464 1697 1949 2217 2503 2806 3126 3464 3819 4192 4581 4988 5413 5854 6313 6790 7283 7794 8323 8868 9431 10011 10609 11224 11856 12505 13172 13856 14558 15277"

let bravais2 = "4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 48 50 54 60 66 70 84 90"

let dirichlet = "1 3 3 7 3 9 3 13 6 9 3 21 3 9 9 25 3 18 3 21 9 9 3 39 6 9 10 21 3 27 3 43 9 9 9 42 3 9 9 39 3 27 3 21 18 9 3 75 6 18 9 21 3 30 9 39 9 9 3 63 3 9 18 67 9 27 3 21 9 27 3 78 3 9 18 21 9 27 3 75 15 9 3 63 9 9 9 39 3"

let diamondCubic = "(0 0 0) (0 2 2) (2 0 2) (2 2 0) (3 3 3) (3 1 1) (1 3 1) (1 1 3)"

let rectPrimeSimplex = "22 165 660 1650 2772 3234 2640 1485 495 55"

let mersenne = "0 1 3 7 15 31 63 127 255 511 1023 2047 4095 8191 16383"

let repfigit = "14 19 28 47 61 75 197 742 1104 1537 2208 2580 3684 4788 7385 7647 7909"

let fibonacci1 = "1 1 4 7 19 40 97 217 508 1159 2683 6160 14209"

let fibonacci2 = "0 1 1 3 5 11 21 43 85 171 341 683 1365 2731 5461 10923 21845"

let nonacci = "0 0 0 0 0 0 0 0 1 1 2 4 8 16 32 64 128 256 511 1021 2040 4076 8144 16272"

let octanacci = "0 0 0 0 0 0 0 1 2 4 8 16 32 64 128 255 509 1016 2028 4048 8080 16128"

let heptanocci = "0 0 0 0 0 0 1 1 2 4 8 16 32 64 127 253 504 1004 2000 3984 7936 15808"

let hexanocci = "0 0 0 0 0 1 1 2 4 8 16 32 63 125 248 492 976 1936 3840 7617 15109"

let pentanocci = "0 0 0 0 1 1 2 4 8 16 31 61 120 236 464 912 1793 3525 6930 13624"

let fibModN = "1 2 2 4 3 4 4 8 5 6 14 10 7 8 12 16 9 16 22 16 29 28 12 30 13 14 14 22 63 24 34 32 39 34 30 58 19 86 32 52 43 58 22 78 39 46 70 102"

let pell = "1 2 8 4 12 8 6 8 24 12 24 8 28 6 24 16 16 24 40 12 24 24 22 8 60 28 72 12 20 24 30 32 24 16 12 24 76 40 56 24 10 24 88 24 24 22 46 16"

let fibonacci3 = "1 3 2 6 12 6 16 12 6 12 8 6 52 48 12 24 16 6 40 12 16 24 22 12 60 156 18 48 28 12 64 48 8 48 48 6 76 120 52 12 28 48 42 24 12 66 96 24"

let jacobsthal = "1 1 6 2 4 6 6 2 18 4 10 6 12 6 12 2 8 18 18 4 6 10 22 6 20 12 54 6 28 12 10 2 30 8 12 18 36 18 12 4 20 6 14 10 36 22 46 6"

let pisano3 = "1 3 1 6 24 3 24 6 3 24 120 6 156 24 24 12 16 3 90 24 24 120 22 6 120 156 9 24 28 24 240 24 120 48 24 6 171 90 156 24 336 24 42 120 24 66 736 12"

let tribonacci = "1 4 13 8 31 52 48 16 39 124 110 104 168 48 403 32 96 156 360 248 624 220 553 208 155 168 117 48 140 1612 331 64 1430 96 1488 312 469 360 2184 496 560 624 308 440 1209 2212 46 416"

let cubicHoneycomb = "1 9 59 169 339 641 1075 1617 2381 3355 4533 5939 7645 9651 11933 14581 17631 21053 24871 29109 33863 39061 44775 51023 57817 65247 73193 81847 91113 101063 111691 123081 135155 148081 161763 176249 191611 207777 224861 242899 261837 281627 302653 324555 347405 371389 396495"

let cubicHoneycomb5 = "1 7 37 163 661 2643 10497 41505 162171"

let thetaHex = "1 3 0 6 3 0 0 6 0 6 0 0 6 6 0 0 3 0 0 6 0 12 0 0 0 3 0 6 6 0 0 6 0 0 0 0 6 6 0 12 0 0 0 6 0 0 0 0 6 9 0 0 6 0 0 0 0 12 0 0 0 6 0 12 3 0 0 6 0 0 0 0 0 6 0 6 6 0 0 6 0 6 0 0 12 0 0 0 0 0 0 12 0 12 0 0 0 6 0"

let triakis8 = "1 14 60 160 335 606 994 1520 2205 3070 4136 5424 6955 8750 10830 13216 15929 18990 22420 26240 30471 35134 40250 45840 51925 58526 65664 73360 81635 90510 100006 110144"

let triakisTetra = "1 8 30 76 155 276 448 680 981 1360 1826 2388 3055 3836 4740 5776 6953 8280 9766 11420 13251 15268 17480 19896 22525 25376 28458 31780 35351 39180 43276 47648"

let triakisIcosa = "1 32 150 412 875 1596 2632 4040 5877 8200 11066 14532 18655 23492 29100 35536 42857 51120 60382 70700 82131 94732 108560 123672 140125 157976 177282 198100 220487 244500 270196 297632"

let triacontahedral = "1 32 143 384 805 1456 2387 3648 5289 7360 9911 12992 16653 20944 25915 31616 38097 45408 53599 62720 72821 83952 96163 109504 124025 139776 156807 175168 194909 216080 238731 262912"

let dodecahedral = "1 14 55 140 285 506 819 1240 1785 2470 3311 4324 5525 6930 8555 10416 12529 14910 17575 20540 23821 27434 31395 35720 40425 45526 51039 56980 63365 70210 77531 85344"
